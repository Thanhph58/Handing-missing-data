dta_final$heal_stat <- rowSums(dta_final[, paste0("F", 1:16)] == "Yes")
dta_final$heal_prob <- rowSums(dta_final[, paste0("X", 1:6)] == "Yes")
# generate table of frequencies
table(dta_final$heal_symp)
table(dta_final$heal_stat)
table(dta_final$heal_prob)
# Recode
dta_final$heal_symp_1 <- factor(ifelse(dta_final$heal_symp == 0, "None", "Yes"), levels = c("Yes", "None"))
dta_final$heal_stat_1 <- factor(ifelse(dta_final$heal_stat == 0, "None", "Yes"), levels = c("Yes", "None"))
dta_final$heal_prob_1 <- factor(ifelse(dta_final$heal_prob == 0, "None", "Yes"), levels = c("Yes", "None"))
# ******** B4_1
table2_health_B4_1 <- table1::table1(~
C1 + C2 + C3 + C4 + C5 + C6 + C7 + C8 + C9 + C10 + C11 + C12 + C13 + C14 + C15 + C16 + C17 +
F1 + F2 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11 + F12 + F13 + F14 + F15 + F16 +
X1 + X2 + X3 + X4 + X5 + X6 + heal_symp_1 + heal_stat_1 + heal_prob_1 | B4_1,
data = dta_final ,
overall = F,
extra.col=list(`p-value`=pvalue1)
)
table2_health_B4_1
# **************** Check which one need to do the Fisher's exact test
library(dplyr)
library(stats)
vars <- c("C1", "C2", "C3", "C4", "C5", "C6", "C7", "C8", "C9", "C10", "C11",
"C12", "C13", "C14", "C15", "C16", "C17",
"F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11",
"F12", "F13", "F14", "F15", "F16", "X1", "X2", "X3", "X4", "X5", "X6",
"heal_symp_1", "heal_stat_1", "heal_prob_1")
fisher_vars_B4_1 <- as.data.frame(vars) %>%
filter(map_lgl(vars, ~ fisher.test(table(dta_final[[.x]], dta_final$B4_1))$p.value < 0.05))
fisher_vars_B4_1
# **************** Fisher test
table2_health_B4_1_f <- table1::table1(~ X2 | B4_1,
data = dta_final ,
overall = F,
extra.col=list(`p-value`=pvalue2)
)
table2_health_B4_1_f
# ******** B5_1
table2_health_B5_1 <- table1::table1(~ C1 + C2 + C3 + C4 + C5 + C6 + C7 + C8 + C9 + C10 + C11 + C12 + C13 + C14 + C15 + C16 + C17 +
F1 + F2 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11 + F12 + F13 + F14 + F15 + F16 +
X1 + X2 + X3 + X4 + X5 + X6 + heal_symp_1 + heal_stat_1 + heal_prob_1  | B5_1,
data = dta_final ,
overall = F,
extra.col=list(`p-value`=pvalue1)
)
table2_health_B5_1
# **************** Check which one need to do the Fisher's exact test
vars <- c("C1", "C2", "C3", "C4", "C5", "C6", "C7", "C8", "C9", "C10", "C11",
"C12", "C13", "C14", "C15", "C16", "C17",
"F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11",
"F12", "F13", "F14", "F15", "F16", "X1", "X2", "X3", "X4", "X5", "X6",
"heal_symp_1", "heal_stat_1", "heal_prob_1")
fisher_vars_B5_1 <- as.data.frame(vars) %>%
filter(map_lgl(vars, ~ fisher.test(table(dta_final[[.x]], dta_final$B5_1))$p.value < 0.05))
fisher_vars_B5_1
# **************** Fisher test
table2_health_B5_1_f <- table1::table1(~ C5 + F8 | B5_1,
data = dta_final ,
overall = F,
extra.col=list(`p-value`=pvalue2)
)
table2_health_B5_1_f
# ******** B6_1
table2_health_B6_1 <- table1::table1(~ C1 + C2 + C3 + C4 + C5 + C6 + C7 + C8 + C9 + C10 + C11 + C12 + C13 + C14 + C15 + C16 + C17 +
F1 + F2 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11 + F12 + F13 + F14 + F15 + F16 +
X1 + X2 + X3 + X4 + X5 + X6 + heal_symp_1 + heal_stat_1 + heal_prob_1  | B6_1,
data = dta_final ,
overall = F,
extra.col=list(`p-value`=pvalue1)
)
table2_health_B6_1
# **************** Check which one need to do the Fisher's exact test
vars <- c("C1", "C2", "C3", "C4", "C5", "C6", "C7", "C8", "C9", "C10", "C11",
"C12", "C13", "C14", "C15", "C16", "C17",
"F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11",
"F12", "F13", "F14", "F15", "F16", "X1", "X2", "X3", "X4", "X5", "X6",
"heal_symp_1", "heal_stat_1", "heal_prob_1")
fisher_vars_B6_1 <- as.data.frame(vars) %>%
filter(map_lgl(vars, ~ fisher.test(table(dta_final[[.x]], dta_final$B6_1))$p.value < 0.05))
fisher_vars_B6_1
# **************** Fisher test
table2_health_B6_1_f <- table1::table1(~ C14 + C17 | B6_1,
data = dta_final ,
overall = F,
extra.col=list(`p-value`=pvalue2)
)
table2_health_B6_1_f
# ******** Total
table2_health_total <- table1::table1(~ C1 + C2 + C3 + C4 + C5 + C6 + C7 + C8 + C9 + C10 + C11 + C12 + C13 + C14 + C15 + C16 + C17 +
F1 + F2 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11 + F12 + F13 + F14 + F15 + F16 +
X1 + X2 + X3 + X4 + X5 + X6 + heal_symp_1 + heal_stat_1 + heal_prob_1 ,
data = dta_final
)
table2_health_total
# **** 2.5 Table 3 Social norms ---------
# ******** B4_1
table3_social_B4_1 <- table1::table1(~ K1 + R1 + S1 + S3 + S4 + S5 + S7 | B4_1,
data = dta_final ,
overall = F,
extra.col=list(`p-value`=pvalue1)
)
table3_social_B4_1
# ******** B5-1
table3_social_B5_1 <- table1::table1(~ K1 + R1 + S1 + S3 + S4 + S5 + S7  | B5_1,
data = dta_final ,
overall = F,
extra.col=list(`p-value`=pvalue1)
)
table3_social_B5_1
# **************** Check which one need to do the Fisher's exact test
vars <- c("K1", "R1", "S1", "S3", "S4", "S5", "S7")
fisher_vars_B5_1 <- as.data.frame(vars) %>%
filter(map_lgl(vars, ~ fisher.test(table(dta_final[[.x]], dta_final$B5_1))$p.value < 0.05))
fisher_vars_B5_1
# **************** Fisher test
table3_social_B5_1_f <- table1::table1(~ S4 + S7 | B5_1,
data = dta_final ,
overall = F,
extra.col=list(`p-value`=pvalue2)
)
table3_social_B5_1_f
# ******** B6_1
table3_social_B6_1 <- table1::table1(~ K1 + R1 + S1 + S3 + S4 + S5 + S7  | B6_1,
data = dta_final ,
overall = F,
extra.col=list(`p-value`=pvalue1)
)
table3_social_B6_1
# Overall
table3_social_total <- table1::table1(~ K1 + R1 + S1 + S3 + S4 + S5 + S7 ,
data = dta_final
)
table3_social_total
# Sum all yes worried
dta_final$B_worried_sum <- rowSums(dta_final[, c("B4_1", "B5_1", "B6_1")] == "Yes")
table(dta_final$B_worried_sum)
# **** 2.6 Table 4 Multi-variable logistics regression ---------
# Load the necessary packages
library(sjPlot)
library(MASS)
# **** B4
model_B4 <- stepAIC(glm(B4_1 ~ sex + age_g + edu_level + p_living + health_ins +
vac_his + heal_symp_1 + heal_stat_1 + heal_prob_1 +
K1 + R1 + S1 + S3 + S4 + S5 + S7,
data = dta_final, family = binomial(link = "logit")),
direction = "backward", alpha = 0.2)
model_1 <- glm(B4_1 ~ p_living + heal_stat_1 + K1,
data = dta_final, family = binomial(link = "logit"))
# **** B5
model_B5 <- stepAIC(glm(B5_1 ~ sex + age_g + edu_level + p_living + health_ins +
vac_his + heal_symp_1 + heal_stat_1 + heal_prob_1 +
K1 + R1 + S1 + S3 + S4 + S5 + S7,
data = dta_final, family = binomial(link = "logit")),
direction = "backward", alpha = 0.2)
model_2 <- glm(B5_1 ~ sex + S4 + S7,
data = dta_final, family = binomial(link = "logit"))
# **** B6
model_B6 <- stepAIC(glm(B6_1 ~ sex + age_g + edu_level + p_living + health_ins +
vac_his + heal_symp_1 + heal_stat_1 + heal_prob_1 +
K1 + R1 + S1 + S3 + S4 + S5 + S7,
data = dta_final, family = binomial(link = "logit")),
direction = "backward", alpha = 0.2)
model_3 <- glm(B6_1 ~ sex + p_living + health_ins + heal_stat_1 + S1,
data = dta_final, family = binomial(link = "logit"))
# **** B sum
model_B_sum <- stepAIC(glm(B_worried_sum ~ sex + age_g + edu_level + p_living + health_ins +
vac_his + heal_symp_1 + heal_stat_1 + heal_prob_1 +
K1 + R1 + S1 + S3 + S4 + S5 + S7,
data = dta_final),
direction = "backward")
model_4 <- glm(B_worried_sum ~ health_ins + heal_stat_1 + K1,
data = dta_final)
# Create the result table
tab_model(model_1, model_2, model_3, model_4)
tab_model(model_4)
# ROC test
library(pROC)
library(ResourceSelection)
roc_1 <- roc(dta_final$B4_1, predict(model_1, type = "response"))
auc_1 <- auc(roc_1)
print(auc_1)
roc_2 <- roc(dta_final$B4_1, predict(model_2, type = "response"))
auc_2 <- auc(roc_2)
print(auc_2)
roc_3 <- roc(dta_final$B6_1, predict(model_3, type = "response"))
auc_3 <- auc(roc_3)
print(auc_3)
# Godn fit test
gof_test_1 <- hoslem.test(dta_final$B4_1, fitted(model_1))
print(gof_test_1)
gof_test_2 <- hoslem.test(dta_final$B5_1, fitted(model_2))
print(gof_test_2)
gof_test_3 <- hoslem.test(dta_final$B6_1, fitted(model_3))
print(gof_test_3)
#####
# ***** C - Data analysis - self-protection practice ***** ------
#####
#########
#########
# ** 2- Outcome variable -------
# **** 2.1 Rename ------
dta_final$B1 <- as.numeric(as.character(dta_final$B1))
dta_final$B2 <- as.numeric(as.character(dta_final$B2))
dta_final$B3 <- as.numeric(as.character(dta_final$B3))
dta_final <- dta_final %>%
mutate(B1_1 = ifelse(B1 < 3, "None", "Yes"),
B2_1 = ifelse(B2 < 3, "None", "Yes"),
B3_1 = ifelse(B3 < 3, "None", "Yes"))
# Check the frequencies
sapply(dta_final[, c("B1_1", "B2_1", "B3_1")], table)
cols_out <- c("B1_1", "B2_1", "B3_1")
dta_final[cols_out] <- lapply(dta_final[cols_out], factor)
# **** 2.2 p-value----
#### chi square and t test
pvalue1 <- function(x, ...) {
# Construct vectors of data y, and groups (strata) g
y <- unlist(x)
g <- factor(rep(1:length(x), times=sapply(x, length)))
if (is.numeric(y)) {
# For numeric variables, perform a standard 2-sample t-test
p <- t.test(y ~ g)$p.value
} else {
# For categorical variables, perform a chi-squared test of independence
p <- chisq.test(table(y, g))$p.value
}
# Format the p-value, using an HTML entity for the less-than sign.
# The initial empty string places the output on the line below the variable label.
c("", sub("<", "&lt;", format.pval(p, digits=3, eps=0.001)))
}
#### fisher and wilcox test
pvalue2 <- function(x, ...) {
# Construct vectors of data y, and groups (strata) g
y <- unlist(x)
g <- factor(rep(1:length(x), times=sapply(x, length)))
if (is.numeric(y)) {
# For numeric variables, perform a standard 2-sample t-test
p <- wilcox.test(y ~ g)$p.value
} else {
# For categorical variables, perform a chi-squared test of independence
p <- fisher.test(table(y, g))$p.value
}
# Format the p-value, using an HTML entity for the less-than sign.
# The initial empty string places the output on the line below the variable label.
c("", sub("<", "&lt;", format.pval(p, digits=3, eps=0.001)))
}
# **** 2.3 Table 1 Demographic ---------
# ******** total
table_practice <- table1::table1(~ B1_1 + B2_1 + B3_1,
data = dta_final
)
table_practice
# ******** B1_1
table1_demo_B1_1 <- table1::table1(~ sex + age + age_g + edu_level + p_living
+ health_ins + vac_his | B1_1,
data = dta_final ,
overall = F,
extra.col=list(`p-value`=pvalue1)
)
table1_demo_B1_1
# ******** B5-1
table1_demo_B2_1 <- table1::table1(~ sex + age + age_g + edu_level + p_living
+ health_ins + vac_his | B2_1,
data = dta_final ,
overall = F,
extra.col=list(`p-value`=pvalue1)
)
table1_demo_B2_1
# ******** B3_1
table1_demo_B3_1 <- table1::table1(~ sex + age + age_g + edu_level + p_living
+ health_ins + vac_his | B3_1,
data = dta_final ,
overall = F,
extra.col=list(`p-value`=pvalue1)
)
table1_demo_B3_1
# Overall
table1_demo_total <- table1::table1(~ sex + age + age_g + edu_level + p_living
+ health_ins + vac_his,
data = dta_final
)
table1_demo_total
# **** 2.4 Table 2 Health status ---------
# create new variables
dta_final$heal_symp <- rowSums(dta_final[, paste0("C", 1:17)] == "Yes")
dta_final$heal_stat <- rowSums(dta_final[, paste0("F", 1:16)] == "Yes")
dta_final$heal_prob <- rowSums(dta_final[, paste0("X", 1:6)] == "Yes")
# generate table of frequencies
table(dta_final$heal_symp)
table(dta_final$heal_stat)
table(dta_final$heal_prob)
# Recode
dta_final$heal_symp_1 <- factor(ifelse(dta_final$heal_symp == 0, "None", "Yes"), levels = c("Yes", "None"))
dta_final$heal_stat_1 <- factor(ifelse(dta_final$heal_stat == 0, "None", "Yes"), levels = c("Yes", "None"))
dta_final$heal_prob_1 <- factor(ifelse(dta_final$heal_prob == 0, "None", "Yes"), levels = c("Yes", "None"))
# ******** B1_1
table2_health_B1_1 <- table1::table1(~
C1 + C2 + C3 + C4 + C5 + C6 + C7 + C8 + C9 + C10 + C11 + C12 + C13 + C14 + C15 + C16 + C17 +
F1 + F2 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11 + F12 + F13 + F14 + F15 + F16 +
X1 + X2 + X3 + X4 + X5 + X6 + heal_symp_1 + heal_stat_1 + heal_prob_1 | B1_1,
data = dta_final ,
overall = F,
extra.col=list(`p-value`=pvalue1)
)
table2_health_B1_1
# **************** Check which one need to do the Fisher's exact test
library(dplyr)
library(stats)
vars <- c("C1", "C2", "C3", "C4", "C5", "C6", "C7", "C8", "C9", "C10", "C11",
"C12", "C13", "C14", "C15", "C16", "C17",
"F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11",
"F12", "F13", "F14", "F15", "F16", "X1", "X2", "X3", "X4", "X5", "X6",
"heal_symp_1", "heal_stat_1", "heal_prob_1")
fisher_vars_B1_1 <- as.data.frame(vars) %>%
filter(map_lgl(vars, ~ fisher.test(table(dta_final[[.x]], dta_final$B1_1))$p.value < 0.05))
fisher_vars_B1_1
# **************** Fisher test
table2_health_B1_1_f <- table1::table1(~ X2 | B1_1,
data = dta_final ,
overall = F,
extra.col=list(`p-value`=pvalue2)
)
table2_health_B1_1_f
# ******** B2_1
table2_health_B2_1 <- table1::table1(~ C1 + C2 + C3 + C4 + C5 + C6 + C7 + C8 + C9 + C10 + C11 + C12 + C13 + C14 + C15 + C16 + C17 +
F1 + F2 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11 + F12 + F13 + F14 + F15 + F16 +
X1 + X2 + X3 + X4 + X5 + X6 + heal_symp_1 + heal_stat_1 + heal_prob_1  | B2_1,
data = dta_final ,
overall = F,
extra.col=list(`p-value`=pvalue1)
)
table2_health_B2_1
# **************** Check which one need to do the Fisher's exact test
vars <- c("C1", "C2", "C3", "C4", "C5", "C6", "C7", "C8", "C9", "C10", "C11",
"C12", "C13", "C14", "C15", "C16", "C17",
"F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11",
"F12", "F13", "F14", "F15", "F16", "X1", "X2", "X3", "X4", "X5", "X6",
"heal_symp_1", "heal_stat_1", "heal_prob_1")
fisher_vars_B2_1 <- as.data.frame(vars) %>%
filter(map_lgl(vars, ~ fisher.test(table(dta_final[[.x]], dta_final$B2_1))$p.value < 0.05))
fisher_vars_B2_1
# **************** Fisher test
table2_health_B2_1_f <- table1::table1(~ C5 + F8 | B2_1,
data = dta_final ,
overall = F,
extra.col=list(`p-value`=pvalue2)
)
table2_health_B2_1_f
# ******** B3_1
table2_health_B3_1 <- table1::table1(~ C1 + C2 + C3 + C4 + C5 + C6 + C7 + C8 + C9 + C10 + C11 + C12 + C13 + C14 + C15 + C16 + C17 +
F1 + F2 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11 + F12 + F13 + F14 + F15 + F16 +
X1 + X2 + X3 + X4 + X5 + X6 + heal_symp_1 + heal_stat_1 + heal_prob_1  | B3_1,
data = dta_final ,
overall = F,
extra.col=list(`p-value`=pvalue1)
)
table2_health_B3_1
# **************** Check which one need to do the Fisher's exact test
vars <- c("C1", "C2", "C3", "C4", "C5", "C6", "C7", "C8", "C9", "C10", "C11",
"C12", "C13", "C14", "C15", "C16", "C17",
"F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11",
"F12", "F13", "F14", "F15", "F16", "X1", "X2", "X3", "X4", "X5", "X6",
"heal_symp_1", "heal_stat_1", "heal_prob_1")
fisher_vars_B3_1 <- as.data.frame(vars) %>%
filter(map_lgl(vars, ~ fisher.test(table(dta_final[[.x]], dta_final$B3_1))$p.value < 0.05))
fisher_vars_B3_1
# **************** Fisher test
table2_health_B3_1_f <- table1::table1(~ C14 + C17 | B3_1,
data = dta_final ,
overall = F,
extra.col=list(`p-value`=pvalue2)
)
table2_health_B3_1_f
# ******** Total
table2_health_total <- table1::table1(~ C1 + C2 + C3 + C4 + C5 + C6 + C7 + C8 + C9 + C10 + C11 + C12 + C13 + C14 + C15 + C16 + C17 +
F1 + F2 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11 + F12 + F13 + F14 + F15 + F16 +
X1 + X2 + X3 + X4 + X5 + X6 + heal_symp_1 + heal_stat_1 + heal_prob_1 ,
data = dta_final
)
table2_health_total
# **** 2.5 Table 3 Social norms ---------
# ******** B1_1
table3_social_B1_1 <- table1::table1(~ K1 + R1 + S1 + S3 + S4 + S5 + S7 | B1_1,
data = dta_final ,
overall = F,
extra.col=list(`p-value`=pvalue1)
)
table3_social_B1_1
# ******** B5-1
table3_social_B2_1 <- table1::table1(~ K1 + R1 + S1 + S3 + S4 + S5 + S7  | B2_1,
data = dta_final ,
overall = F,
extra.col=list(`p-value`=pvalue1)
)
table3_social_B2_1
# **************** Check which one need to do the Fisher's exact test
vars <- c("K1", "R1", "S1", "S3", "S4", "S5", "S7")
fisher_vars_B2_1 <- as.data.frame(vars) %>%
filter(map_lgl(vars, ~ fisher.test(table(dta_final[[.x]], dta_final$B2_1))$p.value < 0.05))
fisher_vars_B2_1
# **************** Fisher test
table3_social_B2_1_f <- table1::table1(~ S4 + S7 | B2_1,
data = dta_final ,
overall = F,
extra.col=list(`p-value`=pvalue2)
)
table3_social_B2_1_f
# ******** B3_1
table3_social_B3_1 <- table1::table1(~ K1 + R1 + S1 + S3 + S4 + S5 + S7  | B3_1,
data = dta_final ,
overall = F,
extra.col=list(`p-value`=pvalue1)
)
table3_social_B3_1
# Overall
table3_social_total <- table1::table1(~ K1 + R1 + S1 + S3 + S4 + S5 + S7 ,
data = dta_final
)
table3_social_total
# Sum all yes worried
dta_final$B_worried_sum <- rowSums(dta_final[, c("B1_1", "B2_1", "B3_1")] == "Yes")
table(dta_final$B_worried_sum)
# **** 2.6 Table 4 Multi-variable logistics regression ---------
# Load the necessary packages
library(sjPlot)
library(MASS)
# **** B1
model_B1 <- stepAIC(glm(B1_1 ~ sex + age_g + edu_level + p_living + health_ins +
vac_his + heal_symp_1 + heal_stat_1 + heal_prob_1 +
K1 + R1 + S1 + S3 + S4 + S5 + S7,
data = dta_final, family = binomial(link = "logit")),
direction = "backward", alpha = 0.2)
model_1 <- glm(B1_1 ~ sex + edu_level + heal_prob_1 +
K1 + R1,
data = dta_final, family = binomial(link = "logit"))
summary(model_1)
# **** B2
model_B2 <- stepAIC(glm(B2_1 ~ sex + age_g + edu_level + p_living + health_ins +
vac_his + heal_symp_1 + heal_stat_1 + heal_prob_1 +
K1 + R1 + S1 + S3 + S4 + S5 + S7,
data = dta_final, family = binomial(link = "logit")),
direction = "backward", alpha = 0.2)
model_2 <- glm(B2_1 ~ sex + p_living + vac_his + heal_symp_1 + heal_stat_1 +
R1,
data = dta_final, family = binomial(link = "logit"))
# **** B3
model_B3 <- stepAIC(glm(B3_1 ~ edu_level + p_living + heal_symp_1 + K1 + S1,
data = dta_final, family = binomial(link = "logit")),
direction = "backward", alpha = 0.2)
model_3 <- glm(B3_1 ~ sex + p_living + health_ins + heal_stat_1 + S1,
data = dta_final, family = binomial(link = "logit"))
# Create the result table
tab_model(model_1, model_2, model_3)
# ROC test
library(pROC)
library(ResourceSelection)
roc_1 <- roc(dta_final$B1_1, predict(model_1, type = "response"))
auc_1 <- auc(roc_1)
print(auc_1)
roc_2 <- roc(dta_final$B1_1, predict(model_2, type = "response"))
auc_2 <- auc(roc_2)
print(auc_2)
roc_3 <- roc(dta_final$B3_1, predict(model_3, type = "response"))
auc_3 <- auc(roc_3)
print(auc_3)
# Godn fit test
gof_test_1 <- hoslem.test(dta_final$B1_1, fitted(model_1))
print(gof_test_1)
gof_test_2 <- hoslem.test(dta_final$B2_1, fitted(model_2))
print(gof_test_2)
gof_test_3 <- hoslem.test(dta_final$B3_1, fitted(model_3))
print(gof_test_3)
model_1 <- glm(B1_1 ~ sex ,
data = dta_final, family = binomial(link = "logit"))
summary(model_1)
tab_model(model_1)
table3_social_total
colnames(dta_raw)
dta_raw <- read_excel("0_dta_2021.xlsx")
# **** A2- Set the working directory -------
######
setwd("D:/0-Thesis/1-Data_incidence rate")
# ******** Load the required packages -------
library(missMethods)
library(tidyverse)
library(readxl)
library(imputeTS)
library(Amelia)
library(zoo)
library(dplyr)
library(tidyr)
library(ggplot2)
library(broom)
library(sjPlot)
library(writexl)
library(segmented)
library(MASS)
######
# **** A3- Import the excel data sets -------
dta_raw <- read_excel("0_dta_2021.xlsx")
colnames(dta_raw)
table3_social_B3_1 <- table1::table1(~  tinhthanhtamtru_code | gioitinh,
data = dta_raw ,
overall = T
)
table3_social_B3_1
dta_raw$tinhthanhtamtru_code <- as.factor(dta_raw$tinhthanhtamtru_code)
table3_social_B3_1 <- table1::table1(~  tinhthanhtamtru_code | gioitinh,
data = dta_raw ,
overall = T
)
table3_social_B3_1
